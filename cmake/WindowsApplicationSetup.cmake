if(NOT DEFINED SPM_BIN_DIR)
  message(FATAL_ERROR "SPM_BIN_DIR not defined, has spm.cmake been included?")
endif()

if(NOT EXISTS(${CMAKE_RUNTIME_OUTPUT_DIRECTORY}))
  file(MAKE_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
endif()

set_property(DIRECTORY
  APPEND
  PROPERTY ADDITIONAL_CLEAN_FILES ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
)
# list of dependencies that need to be copied over. once we have static linking support in SPM
# we should be able to get rid of this
set(SPM_WINRT_DEPENDENCIES
  UWP
  WindowsFoundation
  WinUI
  WinAppSDK
 )

set(ApplicationDependencies
  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_PROJECT_NAME}.exe.manifest
  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_PROJECT_NAME}.exe
  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Microsoft.WindowsAppRuntime.Bootstrap.dll
)

file(TO_NATIVE_PATH ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} CMAKE_BINARY_DIR_WIN)

set(PROJECT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Sources/${CMAKE_PROJECT_NAME})
set(WIN32_MANIFEST_FILE ${PROJECT_DIR}/${CMAKE_PROJECT_NAME}.exe.manifest)
# LLDB crashes on startup with an embedded manifest, so we're using a side-by-side
# manifest for now. In order to embed the manifest, change the -out: to -outputresource:
add_custom_command(OUTPUT ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_PROJECT_NAME}.exe.manifest
  COMMAND ${WINSDK_BUILDTOOLS_BIN_DIR}/mt -nologo -manifest ${WIN32_MANIFEST_FILE} -out:${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_PROJECT_NAME}.exe.manifest
  DEPENDS ${WIN32_MANIFEST_FILE}
  COMMENT "Merging Win32 manifest")

file(TO_NATIVE_PATH ${SPM_BIN_DIR} SPM_BIN_DIR_WIN)

list(TRANSFORM SPM_WINRT_DEPENDENCIES APPEND ".dll" OUTPUT_VARIABLE SPM_WINRT_DLLS)

set(SPM_FILES
  ${CMAKE_PROJECT_NAME}.exe
  ${SPM_WINRT_DLLS}
)

list(TRANSFORM SPM_FILES PREPEND "${SPM_BIN_DIR}/" OUTPUT_VARIABLE SPM_INPUTS)
list(TRANSFORM SPM_FILES PREPEND "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/" OUTPUT_VARIABLE SPM_OUTPUTS)

add_custom_command(OUTPUT ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_PROJECT_NAME}.exe
   COMMAND ${CMAKE_COMMAND} -E copy ${SPM_INPUTS} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
   DEPENDS ${SPM_BIN_DIR_WIN}\\${CMAKE_PROJECT_NAME}.exe
   DEPENDS ${CMAKE_PROJECT_NAME}-SPM
   COMMENT "Copying SPM generated dependencies from ${SPM_BIN_DIR}"
)

add_custom_command(OUTPUT ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Microsoft.WindowsAppRuntime.Bootstrap.dll
   COMMAND ${CMAKE_COMMAND} -E copy ${PkgMicrosoft_WindowsAppSDK}/runtimes/win10-${TARGET_PLATFORM}/native/Microsoft.WindowsAppRuntime.Bootstrap.dll ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Microsoft.WindowsAppRuntime.Bootstrap.dll
   COMMENT "Copying Microsoft.WindowsAppRuntime.Bootstrap.dll"
)

if(EXISTS ${PROJECT_DIR}/Info.plist)
  add_custom_command(OUTPUT ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Info.plist
    COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_DIR}/Info.plist ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Info.plist
    DEPENDS ${PROJECT_DIR}/Info.plist
    COMMENT "Copying Info.plist"
  )

  set(ApplicationDependencies
    ${ApplicationDependencies}
    ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Info.plist
  )
endif()

if(EXISTS ${PROJECT_DIR}/App.xaml)
  add_custom_command(OUTPUT ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/App.xaml
    COMMAND ${CMAKE_COMMAND} -E copy ${PROJECT_DIR}/App.xaml ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/App.xaml
    DEPENDS ${PROJECT_DIR}/App.xaml
    COMMENT "Copying App.xaml"
  )

  set(ApplicationDependencies
    ${ApplicationDependencies}
    ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/App.xaml
  )
endif()

file(GLOB_RECURSE APP_RESOURCE_FILE_NAMES RELATIVE ${PROJECT_DIR}/Resources/ ${PROJECT_DIR}/Resources/*)
list(TRANSFORM APP_RESOURCE_FILE_NAMES PREPEND ".dll" OUTPUT_VARIABLE SPM_WINRT_DLLS)
list(TRANSFORM APP_RESOURCE_FILE_NAMES PREPEND ${PROJECT_DIR}/Resources/ OUTPUT_VARIABLE APP_RESOURCES)
list(TRANSFORM APP_RESOURCE_FILE_NAMES PREPEND ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_PROJECT_NAME}_${CMAKE_PROJECT_NAME}.resources/ OUTPUT_VARIABLE APP_RESOURCES_DEST)

# Copy all resources generated by the build.
add_custom_target(COPY_RESOURCES
  COMMAND powershell.exe /C Copy-Item ${SPM_BIN_DIR}/*.resources -Destination ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} -Recurse -Force
  COMMENT "Copying App resources"
)
set(ApplicationDependencies
  ${ApplicationDependencies}
  COPY_RESOURCES
)

# XCTest dependency.
set(XCTest_DIR "$ENV{SDKROOT}/../../Library/XCTest-development")
add_custom_command(OUTPUT ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/XCTest.dll
  COMMAND ${CMAKE_COMMAND} -E copy "${XCTest_DIR}/usr/bin64/XCTest.dll" ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/XCTest.dll
  COMMENT "Copying XCTest.dll"
)
set(ApplicationDependencies
  ${ApplicationDependencies}
  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/XCTest.dll
)

add_custom_target(SetupApplication ALL
  DEPENDS ${ApplicationDependencies}
)

add_dependencies(SetupApplication ${CMAKE_PROJECT_NAME})
